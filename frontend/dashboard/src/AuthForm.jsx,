// frontend/dashboard/src/AuthForm.jsx
import React, { useState, useEffect } from "react";
import supabase from "./supabaseClient";

const GOOGLE_BUTTON_LIGHT = "/dashboard/web_light_sq_ctn.svg";
const GOOGLE_BUTTON_DARK  = "/dashboard/web_dark_sq_ctn.svg";

function getPrefersDark() {
  if (typeof window === "undefined") return false;
  return window.matchMedia("(prefers-color-scheme: dark)").matches;
}

export default function AuthForm({ showGoogle = true }) {
  const [email, setEmail] = useState("");
  const [password, setPassword] = useState("");
  const [isSignUp, setIsSignUp] = useState(false);
  const [error, setError] = useState("");
  const [message, setMessage] = useState("");
  const [loading, setLoading] = useState(false);
  const [isDarkMode, setIsDarkMode] = useState(getPrefersDark());
  const [showPass, setShowPass] = useState(false);

  useEffect(() => {
    const mq = window.matchMedia("(prefers-color-scheme: dark)");
    const handler = (e) => setIsDarkMode(e.matches);
    mq.addEventListener("change", handler);
    return () => mq.removeEventListener("change", handler);
  }, []);

  const handleGoogleLogin = async (e) => {
    e.preventDefault();
    setLoading(true);
    setError("");
    try {
      const { error } = await supabase.auth.signInWithOAuth({
        provider: "google",
        options: { redirectTo: window.location.origin + "/dashboard" }
      });
      if (error) throw error;
    } catch (err) {
      setError(err.message || "Google login failed.");
    } finally {
      setLoading(false);
    }
  };

  const handleSubmit = async (e) => {
    e.preventDefault();
    setLoading(true);
    setError("");
    setMessage("");
    try {
      if (isSignUp) {
        const { error: signUpError } = await supabase.auth.signUp({ email, password });
        if (signUpError) throw signUpError;
        setMessage("Sign up successful! Check your email to confirm.");
      } else {
        const { error: signInError } = await supabase.auth.signInWithPassword({ email, password });
        if (signInError) throw signInError;
        setMessage("Login successful! Redirecting‚Ä¶");
        setTimeout(() => window.location.href = "/dashboard", 1000);
      }
    } catch (err) {
      setError(err.message || "Authentication error. Try again.");
    } finally {
      setLoading(false);
    }
  };

  return (
    <form onSubmit={handleSubmit} className="auth-form" style={/* your styles */}>
      <h2 style={{ textAlign: "center", marginBottom: 18 }}>
        {isSignUp ? "Sign Up" : "Log In"}
      </h2>

      {showGoogle && (
        <>
          <button
            type="button"
            onClick={handleGoogleLogin}
            disabled={loading}
            style={/* your styles */}
          >
            <img
              src={isDarkMode ? GOOGLE_BUTTON_DARK : GOOGLE_BUTTON_LIGHT}
              alt="Continue with Google"
              style={{ height: 26, width: 26 }}
            />
            Continue with Google
          </button>
          <div style={{ textAlign: 'center', margin: '12px 0' }}>or</div>
        </>
      )}

      <label>Email</label>
      <input
        type="email"
        required
        placeholder="you@example.com"
        value={email}
        onChange={e => setEmail(e.target.value)}
        disabled={loading}
        style={/* your styles */}
      />

      <label>Password</label>
      <div style={{ position: "relative" }}>
        <input
          type={showPass ? "text" : "password"}
          required
          placeholder={isSignUp ? "Create a password" : "Your password"}
          value={password}
          onChange={e => setPassword(e.target.value)}
          disabled={loading}
          style={/* your styles */}
        />
        <button
          type="button"
          onClick={() => setShowPass(v => !v)}
          aria-label={showPass ? "Hide password" : "Show password"}
          style={{ position: "absolute", right: 10, top: "50%", transform: "translateY(-50%)" }}
        >
          {showPass ? "üôà" : "üëÅÔ∏è"}
        </button>
      </div>

      {error && <div style={{ color: "#c0392b", textAlign: "center" }}>{error}</div>}
      {message && <div style={{ color: "#198754", textAlign: "center" }}>{message}</div>}

      <button type="submit" disabled={loading} style={/* your styles */}>
        {loading ? (isSignUp ? "Signing up‚Ä¶" : "Logging in‚Ä¶") : (isSignUp ? "Sign Up" : "Log In")}
      </button>

      <div style={{ textAlign: "center", marginTop: 12 }}>
        {isSignUp ? (
          <>Already a member? <button type="button" onClick={() => setIsSignUp(false)}>Log In</button></>
        ) : (
          <>New here?     <button type="button" onClick={() => setIsSignUp(true)}>Sign Up</button></>
        )}
      </div>
    </form>
  );
}
